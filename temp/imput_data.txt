
    universe = [1, 6, 3, 4, 8, 20, 104, 348, 890, 10]
    ds = DSU()
    ds.make_set(universe)
    ds.print_sets()

    ds.union(6, 1)
    ds.print_sets()

    ds.union(8, 3)
    ds.print_sets()

    ################# Working_code(new)

    class DSU:
    parent = {}
    rank = {}

    def make_set(self, universe):
        for i in universe:
            self.parent[i] = i
            self.rank[i] = 0

    def find(self, k):
        if self.parent[k] != k:
            self.parent[k] = self.find(self.parent[k])
        return self.parent[k]

    def union(self, a, b):
        x = self.find(a)
        y = self.find(b)
        if x == y:
            return x == y
        if self.rank[x] > self.rank[y]:
            self.parent[y] = x
        elif self.rank[x] < self.rank[y]:
            self.parent[x] = y
        else:
            self.parent[x] = y
            self.rank[y] = self.rank[y] + 1

    def print_sets(self):
        print([self.find(i) for i in universe])


if __name__ == '__main__':
    pass


################################# Working_code (old)

class DSU:
    parent = {}
    rank = {}

    def make_set(self, universe):
        for i in universe:
            self.parent[i] = i
            self.rank[i] = 0

    def find(self, k):
        if self.parent[k] != k:
            self.parent[k] = self.find(self.parent[k])
        return self.parent[k]

    def union(self, a, b):
        x = self.find(a)
        y = self.find(b)
        if x == y:
            return x == y
        if self.rank[x] > self.rank[y]:
            self.parent[y] = x
        elif self.rank[x] < self.rank[y]:
            self.parent[x] = y
        else:
            self.parent[x] = y
            self.rank[y] = self.rank[y] + 1


def print_sets(universe, ds):
    print([ds.find(i) for i in universe])


if __name__ == '__main__':
    pass




import sys
from unittest import TestCase

from PyQt5 import QtCore
from PyQt5.QtTest import QTest
from PyQt5.QtWidgets import QApplication

from gui import MainWindow, UnionWidget
from facade import Facade


class FunctionalTest(TestCase):
    def setUp(self):
        self.qapp = QApplication(sys.argv)
        name = 'dsu_test_DB.db'
        self.facade = Facade(name)
        self.window = MainWindow(self.facade)

    def test_elem_add(self):
        add_Button = self.window.ui.addButton
        self.window.lineAdd.setValue(1)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)
        self.window.lineAdd.setValue(12)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)

    def test_elem_union(self):
        add_Button = self.window.ui.addButton
        self.window.lineAdd.setValue(1)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)
        self.window.lineAdd.setValue(12)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)

        union_Button = self.window.ui.unionButton
        QTest.mouseClick(union_Button, QtCore.Qt.MouseButton.LeftButton)
        for window in self.qapp.topLevelWidgets():
            if isinstance(window, UnionWidget):
                dialog = window
                break
        else:
            self.fail()

        QTest.mouseClick(dialog.unionButton2, QtCore.Qt.MouseButton.LeftButton)

    def test_elem_find(self):
        add_Button = self.window.ui.addButton
        self.window.lineAdd.setValue(1)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)
        self.window.lineAdd.setValue(12)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)

        find_Button = self.window.ui.findButton
        self.window.lineFind.setValue(1)
        QTest.mouseClick(find_Button, QtCore.Qt.MouseButton.LeftButton)

    def test_save(self):
        add_Button = self.window.ui.addButton
        self.window.lineAdd.setValue(1)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)
        self.window.lineAdd.setValue(12)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)

        save_Button = self.window.ui.saveButton
        QTest.mouseClick(save_Button, QtCore.Qt.MouseButton.LeftButton)

    def test_sets_delete(self):
        delete_Button = self.window.ui.deleteButton
        QTest.mouseClick(delete_Button, QtCore.Qt.MouseButton.LeftButton)


if __name__ == '__main__':
    pass







import sys
from unittest import TestCase

from PyQt5 import QtCore
from PyQt5.QtTest import QTest
from PyQt5.QtWidgets import QApplication

from gui import MainWindow, UnionWidget
from facade import Facade


class FunctionalTest(TestCase):
    def setUp(self):
        self.qapp = QApplication(sys.argv)
        name = 'dsu_test_DB.db'
        self.facade = Facade(name)
        self.window = MainWindow(self.facade)

    def test_elem_push(self):
        add_Button = self.window.ui.addButton
        self.window.lineAdd.setValue(1)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)
        self.window.lineAdd.setValue(12)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)

    def test_elem_union(self):
        self.window.lineAdd.setValue(1)
        self.window.lineAdd.setValue(12)

        union_Button = self.window.ui.unionButton
        QTest.mouseClick(union_Button, QtCore.Qt.MouseButton.LeftButton)
        for window in self.qapp.topLevelWidgets():
            if isinstance(window, UnionWidget):
                dialog = window
                break
        else:
            self.fail()

        dialog.linePush_1st.setValue(1)
        dialog.linePush_2nd.setValue(12)
        QTest.mouseClick(dialog.unionButton2, QtCore.Qt.MouseButton.LeftButton)

    def test_elem_find(self):
        find_Button = self.window.ui.findButton
        self.window.lineFind.setValue(1)
        QTest.mouseClick(find_Button, QtCore.Qt.MouseButton.LeftButton)

    def test_save(self):
        add_Button = self.window.ui.addButton
        self.window.lineAdd.setValue(1)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)
        self.window.lineAdd.setValue(12)
        QTest.mouseClick(add_Button, QtCore.Qt.MouseButton.LeftButton)

        save_Button = self.window.ui.saveButton
        QTest.mouseClick(save_Button, QtCore.Qt.MouseButton.LeftButton)

    def test_sets_delete(self):
        delete_Button = self.window.ui.deleteButton
        QTest.mouseClick(delete_Button, QtCore.Qt.MouseButton.LeftButton)


if __name__ == '__main__':
    pass
